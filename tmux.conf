########################
# ***    PLUGINS   *** #
########################
set -g @plugin 'tmux-plugins/tmux-cpu'
# Use this plugin or code snippet below for neo(vim)/tmux integration
# set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-sessionist'

# That f***ing code broke my Tmux
# set -g @resurrect-capture-pane-contents 'on'
# set -g @continuum-restore 'on'

########################
# ***    DISPLAY   *** #
########################

# To enable Yazi's image preview to work correctly in tmux
set -g allow-passthrough on

set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# utf8 is on
setw -q -g utf8 on

# Set tmux to display in 256 colors
set -g default-terminal "tmux-256color"

# NOTE: why I use `-s` instead of `-g` flag see here:
# https://stackoverflow.com/questions/41783367/tmux-tmux-true-color-is-not-working-properly
# and here:
# https://superuser.com/questions/758843/difference-between-global-server-session-and-window-options
set-option -sa terminal-overrides ',xterm*:Tc'

# Set border colors
set-option -g pane-border-style 'fg=#343D46,bg=colour0'
set-option -g pane-active-border-style 'fg=colour3,bg=colour0'

# Reorder tmux windows
# Pressing Ctrl+Shift+Left (will move the current window to the left.
# Similarly right. No need to use the modifier (C-a).
# NOTE: that for `bind-key` also available shorten version `bind`
bind-key -n C-S-Left swap-window -t -1\; select-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

# Set status line message style
set -g message-style "fg=colour5,bg=default"

# Set the color of the window list
setw -g window-status-style fg=cyan,bg=default

# Set colors for the active window
setw -g window-status-current-style fg=colour5,bold,bg=default

# active pane normal, other shaded out
# setw -g window-style fg=color240,bg=235
# setw -g window-active-style fg=white,bg=black

# Set mode style (including history bar)
set -g mode-style "fg=colour3"

########################
# ***    GENERAL   *** #
########################

# Setting up default shell
set -g default-shell /bin/zsh

# use <C-j> and <C-a> for the prefix
# and unbind <C-b> to free it up
unbind C-b
set-option -g prefix C-j
set-option -g prefix2 C-a

# use send-prefix to pass <C-j> through to application
bind-key C-j send-prefix

# Start windows numbering at 1
set -g base-index 1

# Renumber windows when one is removed
set -g renumber-windows on

# Allow tmux to set the terminal title
set -g set-titles on

# Start pane numbering at 1
setw -g pane-base-index 1

# Sort sessions by name
bind-key s choose-tree -sZ -O name

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# Repeat time limit (ms)
set-option -g repeat-time 500

# enable scroll with mouse
set -g mouse on

bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind-key -n WheelDownPane select-pane -t= \; send-keys -M

# shorten command delay
set -sg escape-time 0
set -g status-interval 0

# reload ~/.tmux.conf using PREFIX r
bind-key r source-file ~/.tmux.conf \; display "Reloaded!"

# split pane and retain the current directory of existing pane or window
unbind '"'
bind-key v split-window -v -c "#{pane_current_path}"
unbind %
bind-key h split-window -h -c "#{pane_current_path}"

# shortcut for synchronize-panes toggle
bind-key C-s set-window-option synchronize-panes

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# Change 'is_vim' varialbe like recomended is this post:
# https://github.com/christoomey/vim-tmux-navigator/issues/295#issuecomment-1021591011
is_vim="children=(); i=0; pids=( $(ps -o pid= -t '#{pane_tty}') ); \
while read -r c p; do [[ -n c && c -ne p && p -ne 0 ]] && children[p]+=\" $\{c\}\"; done <<< \"$(ps -Ao pid=,ppid=)\"; \
while (( $\{#pids[@]\} > i )); do pid=$\{pids[i++]\}; pids+=( $\{children[pid]-\} ); done; \
ps -o state=,comm= -p \"$\{pids[@]\}\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Copy mode
# taken from: https://github.com/gpakosz/.tmux/blob/master/.tmux.conf
bind-key Enter copy-mode # enter copy mode

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-pipe  # Only copy,
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | reattach-to-usernamespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'

# Copy and paste inside Tmux with vi keys
bind-key Escape copy-mode
bind-key P paste-buffer

# Switch to previous window
bind-key -n S-Left previous-window
bind-key -n S-Right next-window

# Selection with mouse should copy to clipboard right away, in addition to the default action.
unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
bind-key -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\; run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null"

# Middle click to paste from the clipboard
# I took it from: https://gist.github.com/rodricels/7951c3bd505d343b07309b76188af9b3
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer -- \"$(xclip -o -sel primary);\"; tmux paste-buffer -p"

# resize panes using PREFIX H, J, K, L
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# Set 'focus-events' ON as nvim is recomended
set-option -g focus-events on

#########################
# ***  STATUS BAR   *** #
#########################

# Enable status bar
set-option -g status on

# Set window list to center
set -g status-justify centre

# Set default bg/fg settings for status bar
set-option -g status-style bright,bg='#1B2B34',fg=default

# set-window-option -g window-status-current-format ''
# set-window-option -g window-status-current-format ''
# set-window-option -g window-status-current-style fg=colour114,bg=default,bright

# Configure CPU plugin colors for statusline
set -g @cpu_low_fg_color "#[fg=green]"
set -g @cpu_medium_fg_color "#[fg=yellow]"
set -g @cpu_high_fg_color "#[fg=red]"

set -g @cpu_low_bg_color "#[bg=default]"
set -g @cpu_medium_bg_color "#[bg=default]"
set -g @cpu_high_bg_color "#[bg=default]"

# Left Status Bar: [CPU Usage]
set -g status-left "#{cpu_bg_color}#{cpu_fg_color} #{cpu_icon}#{cpu_percentage}"
set -g status-left-length 85

# Right Status Bar: [Session Name][Date][Time]
set -g status-right "#[fg=magenta]#S #[fg=colour8]‹#[fg=yellow]#[fg=yellow,bold,bg=default] %b %d %Y #[fg=colour8]‹#[fg=green,bg=default]#[bg=default,fg=green,bold]%H:%M #[fg=blue]"

# Auto-hide status bar if pane is maximized
set-hook -g 'after-resize-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_zoomed_flag} -gt 1 ]; then tmux set status off; else tmux set status on; fi"'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'

# Clear screen with Ctrl-l outside of vim/neovim session
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "send-keys C-l"
